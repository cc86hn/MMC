Discovery via UDP on port 52358

TCP communication also going via port 52358

potential Wrappings:
	Yaml via HTTP for eventless, TCP transporting for events enabled due to always-open-connect. maybe REST-based for other uses?


Each packet is from type !!org.cc86.MMC.API.Packet
payload: Single Mapping of String to any data called data.

Common keys: 
	type: 
		set: sets given attribute to certain value. parameters until newline delimiter
		get: gets current value of property
		response: only used by server when sending a response

	command: one of the commands listed under the following section.

================================================================
Commands available
================================================================
==Audio general==
volume:
	value: integer from 0 to 255 denoting the volume

	
==Music related==
//not yet implemented
playback_control:
	No get supported.
	action: {play:pause:fastforward:skip}

//not yet implemented
playback_status:
	Readonly property;
	title: title of current track
	time: current position on track
	duration: length of current track.
	seekable: boolean denoting if track is seekable
		
//not yet implemented
playback_seek
	set only
	position: time in seconds for seeking.

//not yet implemented
Playback_DLNA
	properties:{IP, path,scheduled}
	settable & gettable, @gettable return playlist
	scheduled sets that the file should be added to the playlist instead of played directly
==Webradio==
webradio:
	only one of the following subcommands used. get only returns URL
	URL: URL of stream/playlist or ShortID
	STOP: stops the current radio stream
	
webradioShortID
	on set: 
		shortID: Short name to be used for the station
		URL: url of the station
	on get: Mapping containing all ShortIDS and their URLs

==Streaming control==
	
vnc:
	only set-able
		No parameters added.
mp4:
	only set-able
	target_port: Port on which the stream flows to the Server
	mode: {fast,slow} Fast: no audio, slow: with aduio but more delay
	
stream:  //control commands independent of medium
	response fields:
		disconnect: tells client to disconnect stream while allowing to reconnect later
		reconnect: tells client to restart stream with parameters used before disconnect.
		message: contains a MEssage to be shown on the statusbar.
		streamsource: contains a List with IP, port and mode of the current stream.

stopall:
	set-able only
	tells all streams to disconnect
	
	
	//Not yet implemented
miracast   //reserved for widi compatible devices
	set: IP of source
	get: none, all attributes are managed on the stream node
==beamer control==
	
//not yet implemented
beamer_sourceselect:
	get: available sources lists
	set: one of available sources
	
==Meta==
event:
	settable only
	eventID: packet type to watch for notification, only attributes that have a get can be watched
	mode: register:registers this listener to the sending computer unregister: removes selected listener for computer
	
	

//category: vlc_control


	
//category: video
	



//Category: Meta
	event:
	parameter: 
		eventID: packet type to watch for notification, only attributes that have a get can be watched
		mode: register:registers this listener to the sending computer unregister: removes selected listener for computer
================================================================
Commands for internal use
================================================================
    Test:
        message: on set: sets message into memory and displays a message on console; on get: returns message wioth a "Saved:" prepended p:
        //debugging command only
	exit:
        no data fields. tells the server to shutdown clean immediately.
		
================================================================
Ideas for later
================================================================
@all: optional: 
	targetnode: id of a subnode of the receiver, may be used if different devices are controlled by 1 module at server